
from math import gcd
from functools import reduce
from operator import mul
from urllib.request import urlopen

from utilities import fibonaccis_to_n, primes_to_n, max_pyramid




problems = {}
functions = {}
solutions = {}




ONE = """
If we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9. The sum of these multiples is 23.

Find the sum of all the multiples of 3 or 5 below 1000.
"""

def one():
    n = 1000
    multiple = lambda x, n: x % n == 0
    multiples = (x for x in range(n) if multiple(x, 3) or multiple(x, 5))
    return sum(multiples)
    
problems[1] = ONE
functions[1] = one
solutions[1] = 233168




TWO = """
Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:

1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.
"""

def two():
    n = 4000000
    fibs = fibonaccis_to_n(n)
    sum_evens = lambda x, fib: x + fib if fib % 2 else x
    return reduce(sum_evens, fibs)

problems[2] = TWO
functions[2] = two
solutions[2] = 4613732




THREE = """
The prime factors of 13195 are 5, 7, 13 and 29.

What is the largest prime factor of the number 600851475143 ?
"""

def three():
    n = 600851475143
    primes = primes_to_n(int(n ** (1 / 2)))
    primes.reverse()
    for prime in primes:
        if n % prime == 0:
            return prime

problems[3] = THREE
functions[3] = three
solutions[3] = 6857




FOUR = """
A palindromic number reads the same both ways. The largest palindrome made from the product of two 2-digit numbers is 9009 = 91 × 99.

Find the largest palindrome made from the product of two 3-digit numbers.
"""

def four():
    n = 1000
    multiples = (i * j for i in range(n // 10, n) for j in range(i, n))
    palindrome = lambda n: str(n) == str(n)[::-1]
    palindromes = (multiple for multiple in multiples if palindrome(multiple))
    return max(palindromes)

problems[4] = FOUR
functions[4] = four
solutions[4] = 906609




FIVE = """
2520 is the smallest number that can be divided by each of the numbers from 1 to 10 without any remainder.

What is the smallest positive number that is evenly divisible by all of the numbers from 1 to 20?
"""

def five():
    n = 20
    lcm = lambda x, y: x * y // gcd(x, y)
    return reduce(lcm, range(2, n))

problems[5] = FIVE
functions[5] = five
solutions[5] = 232792560




SIX = """
The sum of the squares of the first ten natural numbers is,

1^2 + 2^2 + ... + 10^2 = 385

The square of the sum of the first ten natural numbers is,

(1 + 2 + ... + 10)^2 = 55^2 = 3025

Hence the difference between the sum of the squares of the first ten natural numbers and the square of the sum is,

3025 - 385 = 2640

Find the difference between the sum of the squares of the first one hundred natural numbers and the square of the sum.
"""

def six():
    n = 100
    sum_squares = sum(range(1, n + 1)) ** 2
    square_sums = sum(x ** 2 for x in range(1, n + 1))
    return sum_squares - square_sums

problems[6] = SIX
functions[6] = six
solutions[6] = 25164150




SEVEN = """
By listing the first six prime numbers: 2, 3, 5, 7, 11, and 13, we can see that the 6th prime is 13.

What is the 10 001st prime number?
"""

def seven():
    n = 10001
    return primes_to_n(1000000)[n - 1]

problems[7] = SEVEN
functions[7] = seven
solutions[7] = 104743




EIGHT = """
The four adjacent digits in the 1000-digit number that have the greatest product are 9 × 9 × 8 × 9 = 5832.

73167176531330624919225119674426574742355349194934
96983520312774506326239578318016984801869478851843
85861560789112949495459501737958331952853208805511
12540698747158523863050715693290963295227443043557
66896648950445244523161731856403098711121722383113
62229893423380308135336276614282806444486645238749
30358907296290491560440772390713810515859307960866
70172427121883998797908792274921901699720888093776
65727333001053367881220235421809751254540594752243
52584907711670556013604839586446706324415722155397
53697817977846174064955149290862569321978468622482
83972241375657056057490261407972968652414535100474
82166370484403199890008895243450658541227588666881
16427171479924442928230863465674813919123162824586
17866458359124566529476545682848912883142607690042
24219022671055626321111109370544217506941658960408
07198403850962455444362981230987879927244284909188
84580156166097919133875499200524063689912560717606
05886116467109405077541002256983155200055935729725
71636269561882670428252483600823257530420752963450

Find the thirteen adjacent digits in the 1000-digit number that have the greatest product. What is the value of this product?
"""

def eight():
    # pre-processing
    chars = list("".join(EIGHT.splitlines()[3:-2]))
    ns = [int(n) for n in chars]

    n_adjacent = 13
    span = range(len(ns) - n_adjacent + 1)
    adjacent_ns = (ns[x: x + n_adjacent] for x in span)

    # product would be 0
    optimization = lambda n: 0 not in n
    filtered_ns = filter(optimization, adjacent_ns)
    products = (reduce(mul, filtered_n) for filtered_n in filtered_ns)
    return max(products)

problems[8] = EIGHT
functions[8] = eight
solutions[8] = 23514624000





NINE = """
A Pythagorean triplet is a set of three natural numbers, a < b < c, for which,

a2 + b2 = c2
For example, 32 + 42 = 9 + 16 = 25 = 52.

There exists exactly one Pythagorean triplet for which a + b + c = 1000.
Find the product abc.
"""

def nine():
    n = 1000
    for c in range(1, n // 2 + 1):
        for b in reversed(range(1, c)):
            a = n - b - c
            if a ** 2 + b ** 2 == c ** 2:
                return a * b * c

problems[9] = NINE
functions[9] = nine
solutions[9] = 31875000





TEN = """
The sum of the primes below 10 is 2 + 3 + 5 + 7 = 17.

Find the sum of all the primes below two million.
"""

def ten():
    n = 2000000
    return sum(primes_to_n(n))

problems[10] = TEN
functions[10] = ten
solutions[10] = 142913828922





ELEVEN = """
In the 20×20 grid below, four numbers along a diagonal line have been marked in red.

08 02 22 97 38 15 00 40 00 75 04 05 07 78 52 12 50 77 91 08
49 49 99 40 17 81 18 57 60 87 17 40 98 43 69 48 04 56 62 00
81 49 31 73 55 79 14 29 93 71 40 67 53 88 30 03 49 13 36 65
52 70 95 23 04 60 11 42 69 24 68 56 01 32 56 71 37 02 36 91
22 31 16 71 51 67 63 89 41 92 36 54 22 40 40 28 66 33 13 80
24 47 32 60 99 03 45 02 44 75 33 53 78 36 84 20 35 17 12 50
32 98 81 28 64 23 67 10 26 38 40 67 59 54 70 66 18 38 64 70
67 26 20 68 02 62 12 20 95 63 94 39 63 08 40 91 66 49 94 21
24 55 58 05 66 73 99 26 97 17 78 78 96 83 14 88 34 89 63 72
21 36 23 09 75 00 76 44 20 45 35 14 00 61 33 97 34 31 33 95
78 17 53 28 22 75 31 67 15 94 03 80 04 62 16 14 09 53 56 92
16 39 05 42 96 35 31 47 55 58 88 24 00 17 54 24 36 29 85 57
86 56 00 48 35 71 89 07 05 44 44 37 44 60 21 58 51 54 17 58
19 80 81 68 05 94 47 69 28 73 92 13 86 52 17 77 04 89 55 40
04 52 08 83 97 35 99 16 07 97 57 32 16 26 26 79 33 27 98 66
88 36 68 87 57 62 20 72 03 46 33 67 46 55 12 32 63 93 53 69
04 42 16 73 38 25 39 11 24 94 72 18 08 46 29 32 40 62 76 36
20 69 36 41 72 30 23 88 34 62 99 69 82 67 59 85 74 04 36 16
20 73 35 29 78 31 90 01 74 31 49 71 48 86 81 16 23 57 05 54
01 70 54 71 83 51 54 69 16 92 33 48 61 43 52 01 89 19 67 48

The product of these numbers is 26 × 63 × 78 × 14 = 1788696.

What is the greatest product of four adjacent numbers in the same direction (up, down, left, right, or diagonally) in the 20×20 grid?
"""

def eleven():
    pass

problems[11] = ELEVEN
functions[11] = eleven
solutions[11] = None




EIGHTEEN = """
By starting at the top of the triangle below and moving to adjacent numbers on the row below, the maximum total from top to bottom is 23.

3
7 4
2 4 6
8 5 9 3

That is, 3 + 7 + 4 + 9 = 23.

Find the maximum total from top to bottom of the triangle below:

75
95 64
17 47 82
18 35 87 10
20 04 82 47 65
19 01 23 75 03 34
88 02 77 73 07 63 67
99 65 04 28 06 16 70 92
41 41 26 56 83 40 80 70 33
41 48 72 33 47 32 37 16 94 29
53 71 44 65 25 43 91 52 97 51 14
70 11 33 28 77 73 17 78 39 68 17 57
91 71 52 38 17 14 91 43 58 50 27 29 48
63 66 04 68 89 53 67 30 73 16 69 87 40 31
04 62 98 27 23 09 70 98 73 93 38 53 60 04 23

NOTE: As there are only 16384 routes, it is possible to solve this problem by trying every route.
However, Problem 67, is the same challenge with a triangle containing one-hundred rows;
it cannot be solved by brute force, and requires a clever method! ;o)
"""




def eighteen():
    str_pyramid = EIGHTEEN.split('\n')[12:-5]
    # same as sixy_seven
    return max_pyramid(str_pyramid)

problems[18] = EIGHTEEN
functions[18] = eighteen
solutions[18] = 1074




SIXTY_SEVEN = """
By starting at the top of the triangle below and moving to adjacent numbers on the row below, the maximum total from top to bottom is 23.

3
7 4
2 4 6
8 5 9 3

That is, 3 + 7 + 4 + 9 = 23.

Find the maximum total from top to bottom in triangle.txt (right click and 'Save Link/Target As...'),
a 15K text file containing a triangle with one-hundred rows.

NOTE: This is a much more difficult version of Problem 18.
It is not possible to try every route to solve this problem, as there are 299 altogether!
If you could check one trillion (1012) routes every second it would take over twenty billion years to check them all.
There is an efficient algorithm to solve it. ;o)
"""

def sixty_seven():
    url = 'https://projecteuler.net/project/resources/p067_triangle.txt'
    file = urlopen(url)
    str_pyramid = [line.decode('utf-8') for line in file]
    # same as eighteen
    return max_pyramid(str_pyramid)

problems[67] = SIXTY_SEVEN
functions[67] = sixty_seven
solutions[67] = 7273




# X = """

# """

# def x():
#     pass

# problems[n] = N
# functions[n] = f
# solutions[n] = None
